
##  regression, but with dummy variables and interaction
REF:  https://eight2late.wordpress.com/2017/07/11/a-gentle-introduction-to-logistic-regression-and-lasso-regularisation-using-r/

"mlbench" data sets: https://cran.r-project.org/web/packages/mlbench/index.html

## PURPOSE: predict probability of diabetes (or not), ie classification

```{r}

library(mlbench)

#load Pima Indian Diabetes dataset
data(PimaIndiansDiabetes)

#set seed to ensure reproducible results
set.seed(42)

#split into training and test sets
PimaIndiansDiabetes[,"train"] <- ifelse(runif(nrow(PimaIndiansDiabetes))<0.8,1,0)
#separate training and test sets
trainset <- PimaIndiansDiabetes[PimaIndiansDiabetes$train==1,]
testset <- PimaIndiansDiabetes[PimaIndiansDiabetes$train==0,]
#get column index of train flag
trainColNum <- grep("train",names(trainset))
#remove train flag column from train and test sets
trainset <- trainset[,-trainColNum]
testset <- testset[,-trainColNum]
#get column index of predicted variable in dataset
typeColNum <- grep("diabetes",names(PimaIndiansDiabetes))
```
```{r}
head(trainset)
plot(trainset)
```


### glm model
```{r}

#build model
glm_model <- glm(diabetes~.,data = trainset, family = binomial)

summary(glm_model)
```

### predictions
```{r}


glm_prob <- predict.glm(glm_model,testset[,-typeColNum],type="response")

#which classes do these probabilities refer to? What are 1 and 0?
contrasts(PimaIndiansDiabetes$diabetes)

#make predictions
##â€¦first create vector to hold predictions (we know 0 refers to neg now)
glm_predict <- rep("neg",nrow(testset))
glm_predict[glm_prob>.5] <- "pos"

#confusion matrix
table(pred=glm_predict,true=testset$diabetes)

#accuracy
mean(glm_predict==testset$diabetes)
```
