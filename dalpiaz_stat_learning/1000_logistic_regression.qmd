---
title: skeleton.qmd
date: last-modified
# Quarto requires title, if want date to appear
---

```{r}
library(tidyverse)
library(ISLR)
Default  <-  as_tibble(Default)
```

```{r}

set.seed(42)
default_idx = sample(nrow(Default), 5000) # Default has 10,000 rows  
default_trn = Default[default_idx, ]   # train, 5000
default_tst = Default[-default_idx, ]  # test,  5000
 
```

## with predictors, find logistic model , compare to default (0 or 1)``
```{r}
model_glm = glm(default ~ balance, data = default_trn, family = "binomial")
coef(model_glm)                        #  b + b1*x1 + b2*x2 + ... 
# (Intercept)     balance 
#   -10.49316     0.00542 
a = coef(model_glm)[[1]] # [1] -10.5
b = coef(model_glm)[[2]] # [1] 0.00542
```


$$
Pr(X=x)  = \frac {1}{1 + e^{-x}}
$$

## each observation, return sum of b + b1*x1 + ... and resulting probability
```{r}
head(predict(model_glm, type= "link"))
head(predict(model_glm, type= "response"))
```

## manually find probability (of deault) each row
```{r}

## compute probability myself
prob  <- function(a,b, x) {
  1/(1+exp(-a - b*x))
}
prob(a,b, x=943)

result = cbind(prob(a,b, x=default_trn$balance), default_trn)
head(result)

## compare predict and my own calc
comp  <- tibble(x=predict(model_glm, type="response"), 
                y=prob(a, b, default_trn$balance))

head(comp)
```

## Plot
```{r}


head(result, n=20)
## bingo !
plot(result[[1]] ~ result$balance)
```

## each observation, return probability of default
```{r}
fit  <- stats::predict(model_glm, type="response")
summary(fit)
```

## each observation, accuracy?
```{r}
model_glm_pred = ifelse(predict(model_glm, type = "link") > 0, "Yes", "No")
# model_glm_pred = ifelse(predict(model_glm, type = "response") > 0.5, "Yes", "No")
```

```{r}
calc_class_err = function(actual, predicted) {
  mean(actual != predicted)
}

## error rate
calc_class_err(actual = default_trn$default, predicted = model_glm_pred)
# [1] 0.0284

```

```{r}
z=default_trn
z
levels(z$default) = c(0,1)
z

plot(default ~ balance, data = default_trn,
     col = "darkorange", pch = "|", ylim = c(-0.2, 1),
     main = "Using Logistic Regression for Classification")

abline(h = 0, lty = 3)
abline(h = 1, lty = 3)
abline(h = 0.5, lty = 2)
curve(predict(model_glm, data.frame(balance = x), type = "response"), 
      add = TRUE, lwd = 3, col = "dodgerblue")
abline(v = -coef(model_glm)[1] / coef(model_glm)[2], lwd = 2)
```


### Use Broom , given model, model_glm
```{r}
library(broom)
broom::tidy(model_glm)
broom::augment(model_glm)              # .fitted  is b+b1*x    
broom::glance(model_glm)
```



vim:linebreak:nospell:nowrap:cul tw=78 fo=tqlnrc foldcolumn=1 cc=+1
filetype=rmd
